import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,b as t}from"./app-Du9n6nRN.js";const p={},e=t(`<p>JdbcTemplate 本身并不直接带来 SQL 注入风险，但它的使用方式可能会引入这种风险。SQL 注入通常是由于在构建 SQL 语句时，不当地将用户输入或不受信任的数据直接拼接到 SQL 查询中，导致攻击者能够注入恶意 SQL 代码。 在使用 JdbcTemplate 时，如果你使用原始字符串拼接的方式来构建 SQL 语句，并且这些语句中包含用户输入，那么你就可能面临 SQL 注入的风险。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users WHERE username=&#39;&quot;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&quot;&#39; AND password=&#39;&quot;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，如果 username 或 password 变量包含恶意用户输入，比如 &#39; OR &#39;1&#39;=&#39;1，那么最终的 SQL 语句就会变成：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token constant">SELECT</span> <span class="token operator">*</span> <span class="token constant">FROM</span> users <span class="token class-name">WHERE</span> username<span class="token operator">=</span>&#39;<span class="token char">&#39; OR &#39;</span><span class="token number">1</span><span class="token char">&#39;=&#39;</span><span class="token number">1</span>&#39; <span class="token class-name">AND</span> password<span class="token operator">=</span><span class="token char">&#39;...&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将导致查询返回所有用户，因为 &#39;1&#39;=&#39;1&#39; 总是为真。这只是一个简单的例子，实际上攻击者可以构造更复杂的 SQL 语句来执行任意操作。 为了避免 SQL 注入风险，你应该使用 JdbcTemplate 提供的参数化查询功能。参数化查询能够确保用户输入被正确地转义，并且不会被解释为 SQL 代码的一部分。在 Spring 的 JdbcTemplate 中，你可以使用命名参数或者索引参数来执行参数化查询。例如： 使用命名参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users WHERE username=:username AND password=:password&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用索引参数：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM users WHERE username=? AND password=?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>username<span class="token punctuation">,</span> password<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(l,u){return a(),n("div",null,o)}const k=s(p,[["render",c],["__file","注入问题.html.vue"]]),d=JSON.parse('{"path":"/back-end/spring/SpringBoot/%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/JdbcTemplate/%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98.html","title":"注入问题","lang":"zh-CN","frontmatter":{"title":"注入问题","category":["问题 安全"],"tag":["spring 框架 jdbc 安全"]},"headers":[],"git":{"createdTime":1713854185000,"updatedTime":1713854185000,"contributors":[{"name":"shuangqi.li","email":"li_shuangq@foxmail.com","commits":1}]},"readingTime":{"minutes":1.45,"words":436},"filePathRelative":"back-end/spring/SpringBoot/常用依赖/JdbcTemplate/注入问题.md","localizedDate":"2024年4月23日"}');export{k as comp,d as data};
