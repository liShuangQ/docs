import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as s,b as a}from"./app-WQ1oeZih.js";const r={},n=a(`<p>JdbcTemplate 本身并不直接带来 SQL 注入风险，但它的使用方式可能会引入这种风险。SQL 注入通常是由于在构建 SQL 语句时，不当地将用户输入或不受信任的数据直接拼接到 SQL 查询中，导致攻击者能够注入恶意 SQL 代码。 在使用 JdbcTemplate 时，如果你使用原始字符串拼接的方式来构建 SQL 语句，并且这些语句中包含用户输入，那么你就可能面临 SQL 注入的风险。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String sql = &quot;SELECT * FROM users WHERE username=&#39;&quot; + username + &quot;&#39; AND password=&#39;&quot; + password + &quot;&#39;&quot;;
List&lt;User&gt; users = jdbcTemplate.query(sql, new UserRowMapper());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，如果 username 或 password 变量包含恶意用户输入，比如 &#39; OR &#39;1&#39;=&#39;1，那么最终的 SQL 语句就会变成：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>SELECT * FROM users WHERE username=&#39;&#39; OR &#39;1&#39;=&#39;1&#39; AND password=&#39;...&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将导致查询返回所有用户，因为 &#39;1&#39;=&#39;1&#39; 总是为真。这只是一个简单的例子，实际上攻击者可以构造更复杂的 SQL 语句来执行任意操作。 为了避免 SQL 注入风险，你应该使用 JdbcTemplate 提供的参数化查询功能。参数化查询能够确保用户输入被正确地转义，并且不会被解释为 SQL 代码的一部分。在 Spring 的 JdbcTemplate 中，你可以使用命名参数或者索引参数来执行参数化查询。例如： 使用命名参数：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String sql = &quot;SELECT * FROM users WHERE username=:username AND password=:password&quot;;
Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();
params.put(&quot;username&quot;, username);
params.put(&quot;password&quot;, password);
List&lt;User&gt; users = jdbcTemplate.query(sql, new UserRowMapper(),params);

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用索引参数：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>String sql = &quot;SELECT * FROM users WHERE username=? AND password=?&quot;;
List&lt;User&gt; users = jdbcTemplate.query(sql, new UserRowMapper(), new Object[]{username, password});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),i=[n];function d(l,u){return t(),s("div",null,i)}const m=e(r,[["render",d],["__file","注入问题.html.vue"]]),p=JSON.parse('{"path":"/back-end/spring/SpringBoot/%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96/JdbcTemplate/%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98.html","title":"3.注入问题","lang":"zh-CN","frontmatter":{"title":"3.注入问题","category":["问题","安全"],"tag":["spring","框架","jdbc","安全"]},"headers":[],"git":{"createdTime":1713854185000,"updatedTime":1717666686000,"contributors":[{"name":"shuangqi.li","email":"li_shuangq@foxmail.com","commits":4}]},"readingTime":{"minutes":1.44,"words":433},"filePathRelative":"back-end/spring/SpringBoot/常用依赖/JdbcTemplate/注入问题.md","localizedDate":"2024年4月23日"}');export{m as comp,p as data};
