import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as e,b as n}from"./app-FSrUH4Nw.js";const t="/docs/assets/img-C5ejnNiz.png",s="/docs/assets/img_1-xK9MP9Ww.png",r="/docs/assets/img_2-BczfRB01.png",p="/docs/assets/img_3-DxeMeX80.png",c="/docs/assets/img_4-eFJTt7NS.png",l="/docs/assets/img_5-6R5ogBei.png",g={},o=n('<h1 id="浏览器的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#浏览器的垃圾回收机制"><span>浏览器的垃圾回收机制</span></a></h1><h2 id="什么是垃圾" tabindex="-1"><a class="header-anchor" href="#什么是垃圾"><span>什么是垃圾？</span></a></h2><p>当一个对象（在堆里）没有任何变量或属性（在栈中）对它进行引用，此时将永远无法操作此对象。这种对象过多会占用大量内存空间导致程序运行变慢。 解决：将不再使用的对象设置为null即可。obj=null;</p><p>内存溢出：一种程序运行出现的错误。当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出的错误。 内存泄漏：占用的内存没有及时释放；内存泄露积累多了就容易导致内存溢出。 你是如何判断内存泄露的？一般是感官上的长时间运行页面卡顿，猜可能会有内存泄漏。通过DynaTrace（IE）profiles等工具一段时间收集数据，观察对象的使用情况。 常见的内存泄露：意外的全局变量（如定义局部变量时忘了写var）；没有及时清理的计数器或回调函数（clearInterval()）；闭包。 避免内存泄露的方法：确定不使用的临时变量置为null；少使用闭包。</p><h2 id="浏览器中的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#浏览器中的垃圾回收机制"><span>浏览器中的垃圾回收机制</span></a></h2><p>js语言中是自动垃圾回收策略。</p><h2 id="栈中的数据是如何回收的" tabindex="-1"><a class="header-anchor" href="#栈中的数据是如何回收的"><span>栈中的数据是如何回收的？</span></a></h2><p>当一个函数执行结束之后，JavaScript 引擎会通过向下移动 ESP （记录当前执行状态的指针）来销毁该函数保存在栈中的执行上下文。 堆中的数据是如何回收的？ 要回收堆中的垃圾数据，就需要用到 JavaScript 中的垃圾回收器了。 在 V8 中会把堆分为新生代和老生代两个区域，新生代中存放的是生存时间短的对象，使用服垃圾回收器回收；老生代中存放的生存时间久的对象，使用主垃圾回收器回收。 不论什么类型的垃圾回收器，它们都有一套共同的执行流程： 第一步是标记空间中活动对象和非活动对象。所谓活动对象就是还在使用的对象，非活动对象就是可以进行垃圾回收的对象。 第二步是回收非活动对象所占据的内存。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。 第三步是做内存整理。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，称为内存碎片。当内存中出现了大量的内存碎片之后，如果需要分配较大连续内存的时候，就有可能出现内存不足的情况。所以最后一步需要整理这些内存碎片，不过副垃圾回收器不会产生内存碎片。 那么接下来，我们就按照这个流程来分析新生代垃圾回收器（副垃圾回收器）和老生代垃圾回收器（主垃圾回收器）是如何处理垃圾回收的。</p><h3 id="副垃圾回收器" tabindex="-1"><a class="header-anchor" href="#副垃圾回收器"><span>副垃圾回收器</span></a></h3><p>通常情况下，大多数小的对象都会被分配到新生区，所以说这个区域虽然不大，但是垃圾回收还是比较频繁的。新生代中用 Scavenge 算法来处理。所谓 Scavenge 算法，是把新生代空间对半划分为两个区域，一半是对象区域，一半是空闲区域，如下图所示：</p><figure><img src="'+t+'" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><p>新加入的对象都会存放到对象区域，当对象区域快被写满时，就需要执行一次垃圾清理操作。在垃圾回收过程中，首先要对对象区域中的垃圾做标记；标记完成之后，就进入垃圾清理阶段，副垃圾回收器会把这些存活的对象复制到空闲区域中，同时它还会把这些对象有序地排列起来，所以这个复制过程，也就相当于完成了内存整理操作，复制后空闲区域就没有内存碎片了。完成复制后，对象区域与空闲区域进行角色翻转，也就是原来的对象区域变成空闲区域，原来的空闲区域变成了对象区域。这样就完成了垃圾对象的回收操作，同时这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。 由于新生代中采用的 Scavenge 算法，所以每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域。但复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般新生区的空间会被设置得比较小。 也正是因为新生区的空间不大，所以很容易被存活的对象装满整个区域。为了解决这个问题，JavaScript 引擎采用了对象晋升策略，也就是经过两次垃圾回收依然还存活的对象，会被移动到老生区中。</p><h3 id="主垃圾回收器" tabindex="-1"><a class="header-anchor" href="#主垃圾回收器"><span>主垃圾回收器</span></a></h3><p>除了新生区中晋升的对象，一些大的对象会直接被分配到老生区。因此老生区中的对象有两个特点，一个是对象占用空间大，另一个是对象存活时间长。 由于老生区的对象比较大，若要在老生区中使用 Scavenge 算法进行垃圾回收，复制这些大的对象将会花费比较多的时间，从而导致回收执行效率不高，同时还会浪费一半的空间。因而，主垃圾回收器是采用标记 - 清除（Mark-Sweep）的算法进行垃圾回收的。下面我们来看看该算法是如何工作的。 首先是标记过程阶段。标记阶段就是从一组根元素开始，递归遍历这组根元素，在这个遍历过程中，能到达的元素称为活动对象，没有到达的元素就可以判断为垃圾数据。 比如最开始的那段代码，当 showName 函数执行退出之后，这段代码的调用栈和堆空间如下图所示：</p><figure><img src="'+s+'" alt="img_1.png" tabindex="0" loading="lazy"><figcaption>img_1.png</figcaption></figure><p>从上图你可以大致看到垃圾数据的标记过程，当 showName 函数执行结束之后，ESP 向下移动，指向了 foo 函数的执行上下文，这时候如果遍历调用栈，是不会找到引用 1003 地址的变量，也就意味着 1003 这块数据为垃圾数据，被标记为红色。由于 1050 这块数据被变量 b 引用了，所以这块数据会被标记为活动对象。这就是大致的标记过程。 接下来就是垃圾的清除过程。它和副垃圾回收器的垃圾清除过程完全不同，你可以理解这个过程是清除掉红色标记数据的过程，可参考下图大致理解下其清除过程：</p><figure><img src="'+r+'" alt="img_2.png" tabindex="0" loading="lazy"><figcaption>img_2.png</figcaption></figure><p>上面的标记过程和清除过程就是标记 - 清除算法，不过对一块内存多次执行标记 - 清除算法后，会产生大量不连续的内存碎片。而碎片过多会导致大对象无法分配到足够的连续内存，于是又产生了另外一种算法——标记 - 整理（Mark-Compact），这个标记过程仍然与标记 - 清除算法里的是一样的，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。你可以参考下图：</p><figure><img src="'+p+'" alt="img_3.png" tabindex="0" loading="lazy"><figcaption>img_3.png</figcaption></figure><h2 id="全停顿" tabindex="-1"><a class="header-anchor" href="#全停顿"><span>全停顿</span></a></h2><p>现在知道了 V8 是使用副垃圾回收器和主垃圾回收器处理垃圾回收的，不过由于 JavaScript 是运行在主线程之上的，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做全停顿（Stop-The-World）。 比如堆中的数据有 1.5GB，V8 实现一次完整的垃圾回收需要 1 秒以上的时间，这也是由于垃圾回收而引起 JavaScript 线程暂停执行的时间，若是这样的时间花销，那么应用的性能和响应能力都会直线下降。主垃圾回收器执行一次完整的垃圾回收流程如下图所示：</p><figure><img src="'+c+'" alt="img_4.png" tabindex="0" loading="lazy"><figcaption>img_4.png</figcaption></figure><p>在 V8 新生代的垃圾回收中，因其空间较小，且存活对象较少，所以全停顿的影响不大，但老生代就不一样了。如果在执行垃圾回收的过程中，占用主线程时间过久，就像上面图片展示的那样，花费了 200 毫秒，在这 200 毫秒内，主线程是不能做其他事情的。比如页面正在执行一个 JavaScript 动画，因为垃圾回收器在工作，就会导致这个动画在这 200 毫秒内无法执行的，这将会造成页面的卡顿现象。 为了降低老生代的垃圾回收而造成的卡顿，V8 将标记过程分为一个个的子标记过程，同时让垃圾标记和 JavaScript 应用逻辑交替进行，直到标记阶段完成，我们把这个算法称为增量标记（Incremental Marking）算法。如下图所示：</p><figure><img src="'+l+'" alt="img_5.png" tabindex="0" loading="lazy"><figcaption>img_5.png</figcaption></figure><p>使用增量标记算法，可以把一个完整的垃圾回收任务拆分为很多小的任务，这些小的任务执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样当执行上述动画效果时，就不会让用户因为垃圾回收任务而感受到页面的卡顿了。</p>',25),d=[o];function m(h,_){return i(),e("div",null,d)}const v=a(g,[["render",m],["__file","垃圾回收.html.vue"]]),S=JSON.parse('{"path":"/front-end/browser/%E6%9C%BA%E5%88%B6/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html","title":"垃圾回收","lang":"zh-CN","frontmatter":{"title":"垃圾回收","category":["浏览器"],"tag":["浏览器"]},"headers":[{"level":2,"title":"什么是垃圾？","slug":"什么是垃圾","link":"#什么是垃圾","children":[]},{"level":2,"title":"浏览器中的垃圾回收机制","slug":"浏览器中的垃圾回收机制","link":"#浏览器中的垃圾回收机制","children":[]},{"level":2,"title":"栈中的数据是如何回收的？","slug":"栈中的数据是如何回收的","link":"#栈中的数据是如何回收的","children":[{"level":3,"title":"副垃圾回收器","slug":"副垃圾回收器","link":"#副垃圾回收器","children":[]},{"level":3,"title":"主垃圾回收器","slug":"主垃圾回收器","link":"#主垃圾回收器","children":[]}]},{"level":2,"title":"全停顿","slug":"全停顿","link":"#全停顿","children":[]}],"git":{"createdTime":1713621280000,"updatedTime":1715670785000,"contributors":[{"name":"liShuangQ-pc","email":"li_shuangq@foxmail.com","commits":1},{"name":"shuangqi.li","email":"li_shuangq@foxmail.com","commits":1}]},"readingTime":{"minutes":8.48,"words":2543},"filePathRelative":"front-end/browser/机制/垃圾回收.md","localizedDate":"2024年4月20日"}');export{v as comp,S as data};
