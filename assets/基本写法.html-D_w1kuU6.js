import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as e,a,t as l,b as n}from"./app-Bfl1roz3.js";const p="/docs/assets/img-Dj7zweS9.png",o="/docs/assets/img-Dj7zweS9.png",i={},c=n(`<h1 id="vue实例" tabindex="-1"><a class="header-anchor" href="#vue实例"><span>Vue实例</span></a></h1><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&#39;hello world&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="el-挂载点" tabindex="-1"><a class="header-anchor" href="#el-挂载点"><span>el 挂载点</span></a></h2><ul><li>el后可以使用其它选择器，建议使用id选择器</li><li>只能支持双标签html，body除外（因为单标签的内部无法写<code>{{message}}</code> ），建议挂载div 因为div没有基础的样式 ，p，h2等会有自己本身的样式</li><li>其中Message对外部是没用的，在el元素命中的内部才可以使用</li><li>new Vue （V是大写的）</li><li>给一个父元素设置挂载点 下面的元素都可以直接使用</li></ul><h2 id="data数据对象" tabindex="-1"><a class="header-anchor" href="#data数据对象"><span>data数据对象</span></a></h2><ul><li>当data中复杂类型时 遵守js的语法</li></ul><h2 id="methods-方法" tabindex="-1"><a class="header-anchor" href="#methods-方法"><span>methods 方法</span></a></h2><ul><li>methods内写绑定的方法</li><li>方法中通过this关键字 获取data中的数据</li></ul><h2 id="vue指令" tabindex="-1"><a class="header-anchor" href="#vue指令"><span>Vue指令</span></a></h2><h3 id="v-text" tabindex="-1"><a class="header-anchor" href="#v-text"><span>v-text</span></a></h3>`,10),u=n(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>覆盖，会顶掉元素内之前写的内容</li><li>后面可以进行字符串拼接，但是由于两边已经是双引号了，所以另外添加的需要是单引号</li><li><code>{{message}}</code>添加不会清除原来的内容， 同样支持字符串拼接</li></ul><h3 id="v-html" tabindex="-1"><a class="header-anchor" href="#v-html"><span>v-html</span></a></h3><p>innerHTML</p><ul><li>写法与v-text相同，效果与innerHTML相同</li></ul><h3 id="v-on" tabindex="-1"><a class="header-anchor" href="#v-on"><span>v-on</span></a></h3><p>为元素绑定事件 简写为 @</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-on：与 @ 效果相同</li><li>methods内写绑定的方法</li><li>事件不加on与js语法(onclick)相同（on已经在v-on添加完了）</li><li>事件绑定的方法写成函数调用的方式 xxx（）</li><li>定义方法时 定义形参接收传入的实参</li><li>@keyup.enter 事件修饰符（.修饰符），限制按键是enter才会执行</li></ul><h3 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show"><span>v-show</span></a></h3><p><code>根据表达值的布尔值真假，切换元素显示和隐藏操控样式</code></p><ul><li>原理为 display：none <img src="`+p+'" alt="img_1.png" loading="lazy"></li><li>上图中 第一个div满足条件显示 第二个不满足条件不显示</li><li>v-show后面的判断条件是最后被解析成 布尔值</li><li>配合v-on等指令更换data中的数值实现灵活控制时候显示（案例）</li></ul><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例：</span></a></h4><ul><li>点击按钮切换显示状态 通过方法更改显示状态 <img src="'+o+`" alt="img.png" loading="lazy"></li></ul><h3 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if"><span>v-if</span></a></h3><p><code>根据表达值的布尔值真假，切换元素显示和隐藏</code></p><ul><li>与v-show不同 直接操控dom</li><li>使用方法一致</li><li>元素直接在文档中出现消失</li><li>注意：在使用中 频繁切换的元素用v-show反之v-if</li></ul><h3 id="v-bind" tabindex="-1"><a class="header-anchor" href="#v-bind"><span>v-bind</span></a></h3><p>设置元素的属性（例如src class等 都是行内的） 简写为v-bind可以省略</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!--第一种和第二种效果一致    --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imgSrc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imgSrc<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>后可以写三元表达式</li></ul><h3 id="v-for" tabindex="-1"><a class="header-anchor" href="#v-for"><span>v-for</span></a></h3><p><code>根据数据生成列表结构</code> 例如：当数组中有4个值的时候，就会给你生成4个（如下图中 会生成4个li）</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item,index) in arr<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-for后 （it，index）in arr 。</li><li>遍历arr这个数组，其中it是数组的每个值 index是数组的下标</li><li>当遍历的类型时数组对象时，遍历出来的每个对象在使用处用 .xxx 得到获取的对象的值??????????</li><li>data中的数组对象可以在方法中进行数组对象操作（push shift。。。）</li></ul><h3 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model"><span>v-model</span></a></h3><p><code>获取和设置表单元素的值（双向数据绑定）</code></p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;hello world&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更改两边的任意一边 另一个都会随着更改</li><li>绑定的数据和表单元素值相互关联</li><li>更改后值确实在同步更新 但是不会体现在代码里面 可以在设置个<code>{{ xxx }}</code>进行查看</li><li>注意：v-model应用在表单元素上,可以应用在组件上</li><li>v-model的原理是：v-bind:value v-on:input</li><li>v-model:value v-on:input 简写为 v-model</li></ul>`,29);function r(d,v){return t(),e("div",null,[c,a("ul",null,[a("li",null,"设置元素文本 简写为 "+l(),1)]),u])}const h=s(i,[["render",r],["__file","基本写法.html.vue"]]),g=JSON.parse('{"path":"/front-end/vue/vue2/%E5%9F%BA%E6%9C%AC%E5%86%99%E6%B3%95.html","title":"vue2基本写法","lang":"zh-CN","frontmatter":{"title":"vue2基本写法","category":["介绍"],"tag":["vue"]},"headers":[{"level":2,"title":"el 挂载点","slug":"el-挂载点","link":"#el-挂载点","children":[]},{"level":2,"title":"data数据对象","slug":"data数据对象","link":"#data数据对象","children":[]},{"level":2,"title":"methods 方法","slug":"methods-方法","link":"#methods-方法","children":[]},{"level":2,"title":"Vue指令","slug":"vue指令","link":"#vue指令","children":[{"level":3,"title":"v-text","slug":"v-text","link":"#v-text","children":[]},{"level":3,"title":"v-html","slug":"v-html","link":"#v-html","children":[]},{"level":3,"title":"v-on","slug":"v-on","link":"#v-on","children":[]},{"level":3,"title":"v-show","slug":"v-show","link":"#v-show","children":[]},{"level":3,"title":"v-if","slug":"v-if","link":"#v-if","children":[]},{"level":3,"title":"v-bind","slug":"v-bind","link":"#v-bind","children":[]},{"level":3,"title":"v-for","slug":"v-for","link":"#v-for","children":[]},{"level":3,"title":"v-model","slug":"v-model","link":"#v-model","children":[]}]}],"git":{"createdTime":1713534858000,"updatedTime":1713584896000,"contributors":[{"name":"shuangqi.li","email":"li_shuangq@foxmail.com","commits":4},{"name":"liShuangQ-pc","email":"li_shuangq@foxmail.com","commits":2}]},"readingTime":{"minutes":3.28,"words":984},"filePathRelative":"front-end/vue/vue2/基本写法.md","localizedDate":"2024年4月19日"}');export{h as comp,g as data};
