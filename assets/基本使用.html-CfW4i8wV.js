import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as t,b as e}from"./app-Bfl1roz3.js";const n={},s=e('<h2 id="mongo" tabindex="-1"><a class="header-anchor" href="#mongo"><span>mongo</span></a></h2><ul><li>mongo 进入 mongo 命令(6.0 之后下载 mongoshell，使用 mongosh 命令)</li><li>help 帮助</li><li>exit 退出</li><li>mongo 数据库名 快速进入数据库</li><li>备份</li><li>mkdir dbbak 创建</li><li>mongodump -d 数据库名 备份</li><li>mongorestore --drop 恢复(注意在备份的文件内)</li><li>mongodump --help 帮助</li></ul><h2 id="curd-语法" tabindex="-1"><a class="header-anchor" href="#curd-语法"><span>CURD 语法</span></a></h2><h3 id="查" tabindex="-1"><a class="header-anchor" href="#查"><span>查</span></a></h3><ul><li>show dbs 查看数据库</li><li>show collections 查看集合</li><li>db.stats() 查看当前数据库信息</li><li>db.集合名.count() 查看集合有多少数据</li><li>集合名可以是数组 db[ 集合 1,集合 2 ].yyy()</li><li>db.集合名.find() 查看集合 ( ) ps:( { } )对象内标识取文档的格式 $gte &gt;= $gt &gt; $lte &lt;= $lt &lt; $eq = $ne != $in 过滤 $exists 过滤是否有 xxx key 的</li><li>db.集合名.find({rank:{$gte:4} }) //取出 rank 值&gt;=4 的</li><li>db.集合名.find({tit:/u/ , rank:{$gte:2}}) //条件可多个</li><li>db.集合名.find({tit:/u/}) //取出 tit 中带有 u 的 ( /u/正则表达式 )</li><li>db.集合名.find({$or:[{tit:/u/},{rank:{$gte:1}}]})//tit 带 u 或 rank&gt;=1</li><li>db.集合名.find({rank:{$in:[3,4]}}) //rank 是 3 和 4 的</li><li>db.集合名.find({show:{$exists:true}}) //拿到有 show 属性 key(mongo 支持不对称的表头 key)</li><li>db.集合名.find({},{tit:true,rank:1})//拿到指定的字段 tit,rank.true 和 1 是一样的 <ul><li>db.集合名.find({},{tit:true,rank:1,_id:0}) //不想要 id _id:0</li></ul></li><li>db.集合名.distinct( &#39;xxx &#39; ) 排序 取出唯一的值(查看有几种分类)</li><li>db.集合名.find( &#39;xxx &#39; ).sort( { xx : 1 } ) 在查询出来后的结果按照升序(1)排列,降序(-1)</li><li>db.集合名.find( &#39;xxx &#39; ).limit( x ) 在查询结果默认顺序取出前 x 个,与 sort 搭配</li><li>db.posts.find({tit:{$exists:1},rank:{$exists:1}},{tit:1,rank:1}).sort({rank:1}).limit(3)</li><li>db.集合名.findOne( &#39;xxx &#39; ) 默认顺序的第一条 等同于.limit( 1 )</li><li>db.posts.findOne({tit:{$exists:1},rank:{$exists:1},rank:{$eq:3}},{tit:1,rank:1})</li><li>db.集合名.find( &#39;xxx &#39; ).skip( x ) 在查询结果默认顺序跳过 x 个 与 limit 配合分页</li><li>db.posts.find({tit:{$exists:1},rank:{$exists:1}}).skip(2).limit(2) skip-1 页码 limit 页多少个</li><li>db.集合.getIndexes() 查看索引</li></ul><h3 id="添" tabindex="-1"><a class="header-anchor" href="#添"><span>添</span></a></h3><ul><li>use 数据库名 进入数据库,没有会创建(刚刚创建完成由于内部没有集合会看不到)</li><li>db.createCollection(&#39;集合名&#39;) 创建集合(当集合创建后 dbs 就可看到数据库了)</li><li>db.集合名.insert( { } ) 在集合中插入对象</li><li>db.集合名.update({ },{$set:{ }},{ }) 有则修改 无则添加</li><li>db.集合名.update( { } , { },{ upsert:true }) 有则更新 无则添加 注意: 第一个{}(假的即可)需要给,为空则修改第一条</li><li>db.集合名.createIndex({rank:1}) 创建 rank 的升序索引</li><li>db.posts.createIndex({rank:1},{unique:true}) 代表唯一</li></ul><h3 id="删" tabindex="-1"><a class="header-anchor" href="#删"><span>删</span></a></h3><ul><li>db.dropDatabase() 删除当前数据库</li><li>db.集合名.drop() 删除集合</li><li>db.集合名.remove( { } ) 删除数据 {}不规定是全部删除,可{tit:&#39;123&#39;}(删除 tit 是 123 的数据)</li><li>db.集合名.update({tit:&#39;demo&#39;},{$unset:{rank:1}}) 删除文档字段</li><li>db.集合名.dropIndex({rank:1}) 删除 rank 的升序索引</li></ul><h3 id="改" tabindex="-1"><a class="header-anchor" href="#改"><span>改</span></a></h3><ul><li>db.集合名.renameCollection(&#39;要改的集合名&#39;) //修改集合名</li><li>db.集合名.update( { 过滤 } , { 修改内容 } , { 操作 }) (updateOne) //修改操作文档 $xxx 函数 $set 严格指定tit字段,没有则添加 $inc 递增 $mul 相乘 $rename 改名 $unset 删除字段 upsert 操作项目(有则改无则加)</li><li>db.posts.update({rank:1},{$set:{tit:&#39;11111111&#39;}}) //$set 严格指定 tit 字段</li><li>不加 $set 为替换,危险操作!!! 上方如不加$set 则代表将整条数据替换为只有 tit:&#39;11111111&#39;</li><li>如果没有对应字段 则为添加</li><li>db.posts.update({type:&#39;it&#39;},{$set:{tit:&#39;typeititititititit&#39;}}) // 注意非字面意思 不会更新所有 type 是 it 的 只会更新第一条</li><li>db.posts.update({type:&#39;it&#39;},{$set:{tit:&#39;typeititititititit&#39;}},{multi:true}) //multi:true 多条更新</li><li>db.posts.update({rank:2},{$inc:{rank:100}}) //在 rank 等于 2 数据 rank 字段加 100</li><li>db.posts.update({tit:&#39;demo&#39;},{$mul:{rank:2}})</li><li>db.posts.update({show:true},{$rename:{show:&#39;isShow&#39;}})</li><li>db.posts.update({tit:&#39;demo&#39;},{$unset:{rank:true}}) //true 可用 1 替代</li><li>db.posts.update({tit:&#39;2222222222&#39;},{rank:222,type:&#39;game&#39;},{upsert:1}) //上方代表看看 有没有 tit 为 2222222 的,有就改成中间{}这样,无就添加中间{} //第一个{}(假的即可)需要给,为空则修改第一条 //注意: 中间{} 是替换上去,不会自动合并字段</li></ul><h3 id="注" tabindex="-1"><a class="header-anchor" href="#注"><span>注</span></a></h3><ul><li>mongo 采用 js 语法,用 js 思维理解</li><li>db 开头后面是函数 记得()执行</li><li>db.xxx 可以直接.xxx 进行引用 (json 对象)</li><li>find( { &#39;&#39; , &#39;&#39; }, { } ) 查询时 ( )内 , 左侧{}筛选 ( )内 , 右侧{}文档操作</li><li>查询采用 js 对象思维, 条件可自由组合</li></ul><h2 id="mongoose" tabindex="-1"><a class="header-anchor" href="#mongoose"><span>mongoose</span></a></h2><ul><li>insert: 主键不存在则正常插入；主键已存在，抛出 DuplicateKeyException 异常。</li><li>save: 主键不存在则正常插入；主键已存在则更新。</li><li>insertMany：批量插入，等同于批量执行 insert。</li><li>create：批量保存，等同于循环执行 save。</li></ul><h2 id="mongodb-函数关闭" tabindex="-1"><a class="header-anchor" href="#mongodb-函数关闭"><span>MongoDB 函数关闭</span></a></h2><p>连接到 MongoDB 服务后，切换到 admin 库，并使用命令关闭服务。 use admin db.shutdownServer() db.runCommand(“shutdown”)</p>',17),a=[s];function d(o,r){return l(),t("div",null,a)}const p=i(n,[["render",d],["__file","基本使用.html.vue"]]),b=JSON.parse('{"path":"/back-end/dbs/db/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDb/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html","title":"基本使用","lang":"zh-CN","frontmatter":{"title":"基本使用","category":["使用","代码片段"],"tag":["数据库","mongo","nosql"]},"headers":[{"level":2,"title":"mongo","slug":"mongo","link":"#mongo","children":[]},{"level":2,"title":"CURD 语法","slug":"curd-语法","link":"#curd-语法","children":[{"level":3,"title":"查","slug":"查","link":"#查","children":[]},{"level":3,"title":"添","slug":"添","link":"#添","children":[]},{"level":3,"title":"删","slug":"删","link":"#删","children":[]},{"level":3,"title":"改","slug":"改","link":"#改","children":[]},{"level":3,"title":"注","slug":"注","link":"#注","children":[]}]},{"level":2,"title":"mongoose","slug":"mongoose","link":"#mongoose","children":[]},{"level":2,"title":"MongoDB 函数关闭","slug":"mongodb-函数关闭","link":"#mongodb-函数关闭","children":[]}],"git":{"createdTime":1713857586000,"updatedTime":1714038327000,"contributors":[{"name":"shuangqi.li","email":"li_shuangq@foxmail.com","commits":2}]},"readingTime":{"minutes":4.01,"words":1202},"filePathRelative":"back-end/dbs/db/常用数据库/MongoDb/基本使用.md","localizedDate":"2024年4月23日"}');export{p as comp,b as data};
